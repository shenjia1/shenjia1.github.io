<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[序列比对（一） Needleman-Wunsch算法]]></title>
    <url>%2F2020%2F07%2F23%2F20200724%2F</url>
    <content type="text"><![CDATA[引言序列比对是生物信息学的经典问题。为了解决生物序列比对的问题，人们已经开发了很多算法，其中包含精确比对，以及为了优化比对速度而诞生的启发式比对算法等等。Needleman-Wunsch算法是一种全局比对算法，也就是会考虑两条序列的所有碱基的比对算法，如下： ATCGGGGGGGGG---GGGGGGCGCG AT-GGGGGGG--CCC------CGCG 算法介绍（1）建立得分矩阵所谓得分矩阵，就是用于序列比对时计算比对得分，比对得分越高，就说明该比对越接近最优比对。根据比对的不同情况可以分为：完全匹配，错误匹配，插入空位三种情况。针对这三种不同的比对情况，我们可以根据得分矩阵进行打分处理。 下表是一个得分矩阵的例子： 0 A T C G 0 0 -2 -2 -2 -2 A -2 1 -1 -1 -1 T -2 -1 1 -1 -1 C -2 -1 -1 1 -1 G -2 -1 -1 -1 1 以上只是一个比较简单的例子，没有根据生物学序列的具体问题进行设计。比如：根据不同碱基的错误匹配，可以给出不同的打分，当然这个针对氨基酸序列的比对更有意义；插入空位的情况在生物学序列中的出现的概率要比错误匹配的概率低很多，那么根据这个生物学特性，可以将插入空位的罚分设的更低。 （2）初始化相似性分数矩阵假设有两条待比对的序列，根据得分矩阵计算每一个碱基之间的相似性分数，从而构建相似性得分矩阵，以(D序列)ACGCG和(Q序列)CCGACC两条序列为例： - A C G C G - 0 -2 -2 -2 -2 -2 C -2 C -2 G -2 A -2 C -2 C -2 根据上面的得分矩阵，可以得到碱基与空位的相似性分数为-2，所以把对应位置的相似性分数初始化为-2. （3）根据下面的逻辑计算各个位置的相似性得分为了计算某个位置的相似性分数，需要考虑三个方向，横向，纵向和对角线。三个方向，其实是针对某个比对位置的三种比对方式，选择分数最大的一种比对方式。比较好理解的是对角线方向，也就是直接匹配。横向和纵向都是插入空格。 对角线： V(i,j) = v(i-1,j-1) + F(D[i],Q[j]) 横向: V(i,j) = v(i-1,j) + F(D[i],-) 纵向：V(i,j) = v(i,j-1) + F(-,Q[j]) 选择以上三种计算方式得到的最大相似性分数作为该位置的相似性分数。以此方法填充得到完整的相似性得分矩阵。 （4）通过回溯法，找到最佳比对，并得到最高得分从相似性得分矩阵的右下角向上回溯，每次取三个方向的最大值作为走向，找到最佳比对，输出比对。 以上是Needleman-Wunsch算法的整体思路，它主要思路是基于动态规划法。]]></content>
      <tags>
        <tag>算法</tag>
        <tag>序列比对</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[生物信息学与GO语言]]></title>
    <url>%2F2020%2F07%2F22%2F20200722%2F</url>
    <content type="text"><![CDATA[生物信息学是一门工具性的学科，主要是编写，使用软件去解决生物学问题。换句话说，生物信息学是一门关于数学，统计学，生物学的交叉学科。为了解决具体的生物学问题，目前已经有了许多优秀的生物信息学算法和软件。这些软件有的是使用perl写的，比如Annovar等；有的是使用C/C++写的，比如bwa等；有的是使用Python写的，比如cnvkit等，也有使用Java编写的，如Exomiser等。已有的软件经过了使用者和开发者的测试使用验证，在准确性上都有了很高的保证。在这种情况下，有的生物信息学分析步骤已经比较成熟了，也已经有了规范，一般我们不需要自己从头开发软件去解决问题，只需要使用脚本语言组合现有的软件搭建合适的流程去解决问题，因为现有的工具已经足够了。但是，同时也有一些方面，现有的软件并不能很好的解决，或者说这个解决问题的方法比较个性化，这个时候就需要我们自己造轮子了。所以，我认为不管是已经有了优秀软件的，还是还没有合适软件的，我们都要尝试自己造轮子，去解决具体的生物学问题，这样对使用生物信息方法解决问题这件事会有自己独特的理解。我们以最基础的生物信息问题举例，序列比对问题。序列比对，简单来说是一个字符串匹配的问题。一般来说，分为以下几种情况：短序列比对到长序列；短序列比对到一组长序列；多序列比对；长序列比对。解决不同的情况，需要应用不同的算法，即使使用现有的比对软件，也需要使用不同的参数。所以如果不了解其中的具体算法，是很难真正解决一个生物学问题的。上面也提到了，生物信息软件可以使用各类不同的编程语言，使用较多的应该是perl，python，C/C++.Perl语言在字符串处理方面有独特的优势，且它又是脚本语言，开发速度比较快，在生物信息学中使用广泛。Python语言具有广泛的第三方库，在需要使用一些统计学算法时，不需要从头编写，直接可以使用三方库即可实现，开发速度快且方便，近年来有取代perl的趋势。C/C++主要在解决一些性能要求比较高的问题时需要，但是相对开发速度较慢。GO语言是由Google开发的编译型语言。语法与C语言类似，学习曲线平缓，容易上手，代码也易读。开发效率和运行效率表现都很好。如果使用GO语言对一些已有的软件进行重构，可能是一件有趣的事情。既可以学习使用GO语言去解决生物学问题，又可以对具体的生物信息学算法有一个全面的认识，我觉得这不失为一种有效的学习方法。下面是我具体的一个计划： （1）序列比对：精确比对：NW算法的实现，SW算法的实现启发式比对：BLAST算法的实现其他比对：BWT比对算法的实现多序列比对算法的实现（2）变异检测：SNV检测：遗传性变异检测算法的实现，体细胞变异检测算法的实现Indel检测：重比对检测算法的实现，局部组装检测算法的实现CNV检测：Exon CNV检测算法的实现，全基因组CNV检测算法的实现SV检测：Split reads重比对检测算法的实现，DNA/RNA分析算法的实现（3）变异注释：Annovar软件算法的实现（4）其他：UPD检测算法的实现可视化交互界面的实现流程构建框架以上计划是一个比较庞大的项目，每一个算法，我都会选择一个或多个现有的软件进行分析，在此基础上使用GO语言对算法进行简单重构，主要目的是为了理解算法，当然在理解算法的基础上，能对现有的算法进行优化，那是最好的结果。]]></content>
      <tags>
        <tag>算法</tag>
        <tag>GO</tag>
        <tag>生物信息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[区块链学习笔记（二）]]></title>
    <url>%2F2018%2F03%2F19%2F20180320%2F</url>
    <content type="text"><![CDATA[0. 说在前面今天打算把这两天从《精通比特币》这本中了解的两种算法记录下来，希望我以及和我一样的数学小白能理解这两种算法的意义。简单的概括一下，椭圆曲线方程算法是一种从私钥生成公钥的非对称加密技术，是密码学的一种算法；哈希二叉树是区块链中存储交易记录的一种高效的数据结构，它结合了哈希表与二叉平衡树，使得验证交易的时间随交易数量增加上升得很慢。下面我会尽可能白话地讲解这两个知识点，本身他们不存在什么联系，我只是在看了前半本书后，对这两个知识点记忆比较深刻，同时也是比较懵懂的情况下，查了一些书籍，根据一些博客的介绍，才对这两个知识点慢慢有了一定的了解，要原谅一个小白的学习效率。 1. 椭圆曲线方程椭圆曲线方程这篇博客讲的很详细，我只是在理解它的基础上加以解释。接下去，我会按照我理解的逻辑描述椭圆曲线方程。简单的来说，椭圆曲线方程的存在，是为了构建一类数，这类数满足我们设定的四则运算，比如自然数，实数。所以椭圆曲线方程是构建这类数的一个工具，是为了使这类数的四则运算很难逆转，也就是无法从结果推知计算过程。 射线平面坐标系其实，椭圆曲线方程与椭圆无关，他是一种直角坐标系中的曲线，是由满足每个方程的点对组成。为了使构建的数域更加的完成，我们首先要引入射线平面坐标系。在学习平面几何的时候，我们都知道两条平行线永不相交，这是没有给出证明，也就是说这是一个公设，那为什么不能认为两个平行线相交于无穷远点。所谓无穷远点，也是构建出来的（数学就是这么多假设，这么多设想，想想多少星星是数学算出来的，好可怕）。 无穷远点有如下定义： 每条直线上只有一个无穷远点； 同一平面上的平行线有相同的无穷远点； 相交的直线的无穷远点不同； 平面上所有无穷远点构成一条直线； 射影平面包括无穷远点和平常点。 我们都知道，平面上的曲线都是可以用方程来表示的，那么射影平面中椭圆曲线也是可以用方程来表示，椭圆曲线就是一群在射影平面上满足威尔斯特拉斯方程（Weierstrass）点。 $Y^2Z+a_2XYZ+a_3YZ^2=X^3+a_2X^2Z+a_4XZ^2+a_6Z^3$ 椭圆曲线上每一个点都必须是光滑的，也就是有切线，当Z为零时，就是无穷远点。Z不为零时，椭圆曲线方程上的点称为平常点，所以每一个平常点都有切线。 有没有可能通过一种运算方法把椭圆曲线上的点联系起来，这在数学上称为群，也就是说可以曲线上的点可以通过曲线上的其他点应用这种四则运算得到。由此，我们定义了椭圆曲线加法。任意取椭圆曲线上两点P、Q（若P、Q两点重合，则作P点的切线），作直线交于椭圆曲线的另一点R’，过R’做y轴的平行线交于R，定义P+Q=R。这样，加法的和也在椭圆曲线上，并同样具备加法的交换律、结合律。 到这里，我们在射影平面上构建了椭圆曲线，并且在椭圆曲线上构建了一个数群。但是这个数群时连续的，连续的数群时无法用来加密。 有限域的椭圆曲线方程所谓有限域的理解，其实很简单就是只选择椭圆曲线上的部分点，将曲线上的所有点除以某个素数p然后取其余数，这样，椭圆曲线上的数组成了一个p阶的数域。并且这个数域中的所有数都符合先前建立的四则运算。这样，有限域的椭圆曲线方程便建立，并且是一个离散的形如自然数的数据集。 下面，我们给出一个有限域Fp，这个域只有有限个元素。 Fp中只有p（p为素数）个元素0,1,2 …… p-2,p-1； Fp 的加法（a+b）法则是 a+b≡c (mod p)；即，(a+c)÷p的余数 和c÷p的余数相同。 Fp 的乘法(a×b)法则是 a×b≡c (mod p)； Fp 的除法(a÷b)法则是 a/b≡c (mod p)；即 a×b-1≡c (mod p)；（b-1也是一个0到p-1之间的整数，但满足b×b-1≡1 (mod p)；具体求法可以参考初等数论）。Fp 的单位元是1，零元是 0。 这样就可以通过计算K=kG来进行加密。公开的密钥算法都是基于数学上的难题来达到加密的目的的，比如计算两个素数的乘积比较容易，但是要对这个乘积进行因式分解就比较困难了。同样这里也是，已知k和G计算K，相对比较容易，而通过K和G计算k就比较困难，其中G为椭圆曲线上的一个平常点。 哈希二叉树所谓哈希二叉树，又叫做默克尔树，是一种区块中存储交易信息的数据结构。这种数据结构最大的好处就在于，每个交易都可以单独直接删除，只保留这个交易的Hash值即可。这样，对整个区块来说，并没有改变他的密码学安全性和完整性，但是数据量可以大大减小。（Hash值32个字节，而一笔交易一般要400多个字节）。如果一个区块中只有一个交易没有后续交易，那么删除其他所有交易，整个区块的数据量会大大减小。因此，在UTXO的记账模式中，使用默克尔树结构，通常就无需担心数据量一直增长导致数据过大的问题了。 哈希就是把任意数据映射程固定长度的数据的函数，如MD5等。 默克尔树是哈希表的一种拓展。或者说哈希表可以看作一种特殊的默克尔树，即树高为2的多叉默克尔树。默克尔树的叶节点是一个个数据块，有相应的哈希与它对应。然后往上走，把每一个叶节点得到的哈希合并成字符串，在运算这个字符串的哈希，这样就得到了一个子哈希。这样最终推算到根节点。这样当叶节点为单数时，在遇到最后一个叶节点时，会复制该叶节点，然后计算这两个叶节点的哈希合并字符串的哈希，生成子哈希。 默克尔树与哈希表的不同在于，默克尔树可以通过分支验证，而不用下载整个列表。这样就节省搜索耗时和存储资源。]]></content>
      <tags>
        <tag>区块链技术原理，椭圆曲线方程，哈希二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[区块链学习笔记（一）]]></title>
    <url>%2F2018%2F03%2F18%2F20180318%2F</url>
    <content type="text"><![CDATA[0. 计划一年之计在于春，春天到了，给自己定了个小目标，深入学习区块链技术（作为一个业余码农，这个目标其实有点大。。。）。 1. 精通比特币从《精通比特币》这本书开始，这本只有300页不到，但是囊括了比特币技术原理设计到每一个细节，讲的很全面，也很清晰，接下去，我会根据我的理解，讲一下这本书中提及的一些算法的具体内容：比如密码学方面的椭圆曲线方程算法，比如哈希二叉树算法等等。 2.这只是一个开始下面附上我的今年书单： SEO实战密码具体数学，计算机科学基础组合数学python绝技，利用python成为顶级黑客深入理解机器学习应用密码学算法设计与分析基础区块链，原理，设计与应用代码大全2白帽子讲web安全量化投资，以python为工具零起点，python大数据与量化交易python黑帽子，黑客与渗透测试与编程之套深度学习算法实践go语言编程概率论及其应用 量化交易书单中低频量化交易策略研发投资学计量经济学漫步华尔街信号与噪声量化交易，自己动手做算法交易黑盒子，量化交易精要]]></content>
      <tags>
        <tag>书籍</tag>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习算法与数据结构]]></title>
    <url>%2F2018%2F03%2F18%2F20180327%2F</url>
    <content type="text"><![CDATA[0. 开始学习《算法》学习算法之前，其实以前看过《算法导论》，但是那本书有太多的证明和运算，看的有点头大，毕竟数学基础比较差，在论坛上，大家都对《算法》这本书推崇备至，一直想要一睹真容，现在终于决定花两个月的时间把这本书读一遍，据说比较适合入门级选手。 1. 第一章 基础下面我会记录比较重要的，并会把练习的代码放在github上，有兴趣的可以看看，虽然代码写的可能比较烂，慢慢进步吧。 第一章的内容主要是讲java语言的基础，我之前没有java语言基础，但是学过C语言和python，对这些基本语法的掌握应该会比较快，所以我在这里会记录一些关于java语言的基础知识点，据书中描述，只要知道这些基本的语法，对书中的算法也可以理解清楚了。 原始数据类型语句：声明、赋值、条件、循环、调用、返回。数组静态方法，函数字符串输入输出数据抽象java语言的标准绘图库StdDraw，因为我是第一次学到，在这里也记一笔。 数据抽象，就是面向对象的编程，重点在于API的设计。 数据类型的值是一组对象的集合，所有操作包括，添加、删除、访问。 背包背包是一种不支持删除元素的集合数据类型。 先进先出的队列后进先出的栈链表链表是一种递归的数据结构， class Node{ int value; Node next; } 链表是一种比较基础的数据结构，通过链表的实现可以构建很多复杂的数据结构。这里基本上是算法第四版的第一章的基本内容，简单的提一下。]]></content>
      <tags>
        <tag>JAVA</tag>
        <tag>算法</tag>
        <tag>面向对象编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Next+github搭建个人博客]]></title>
    <url>%2F2017%2F08%2F18%2F20180312%2F</url>
    <content type="text"><![CDATA[0.开篇本来只是想找个地方记录每一天学习的内容，花了一段时间寻找合适的平台，但是依然没有找到。看到圈内很多大牛都有自己的博客，也想通过购买域名和服务器搭建自己的博客，这样对于一个菜鸟来说，成本有点高，忽然某一天发现可以通过github构建免费的博客，本篇仅通过参考Devin_的Hexo-Next-主题优化的方法，徒手建立，亲测有效，开启菜鸟之路。 1. 下载安装Hexo和NextHexo依赖Node.js，所以首先需要安装Node.js和npm，我是用的Mac系统，具体的安装方法是通过homebrew进行的，具体代码如下： 安装homebrewruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" 安装node.jsbrew install node 安装hexonpm install -g hexo 相关hexo命令创建相应的博客目录后，就可以通过hexo init命令初始化，得到一篮子文件，开始搭建博客 hexo generate #得到一个静态页面 hexo clean #清除缓存文件 hexo deploy #同步github 主题Next我选择了next主题，也可以选择其他主题，只需要把相应的主题拷贝theme目录下,主题的相关说明文档里面后Next主题的基本操作。 2. 注册github账号注册GitHub账号，创建自己repo，相信每个程序员或伪程序员都知道github，小白可以自行google。 3. 简单设置本部分参考了Mac下利用Hexo+GitHub搭建自己的博客,一步一步操作进行的。 检查SSH key，如果已经有的话，备份一下cd ~/.ssh mkdir key_backup mv id_rsa* key_backup 如果没有，根据下面的命令生成SSH keyssh-keygen -t rsa -C "xxxx@xxxx.com” 将SSH key添加到Github登录到GitHub页面，Account Settings-&gt;SSH Public Keys-&gt;Add another key将生成的key(id_rsa.pub文件）内容copy到输入框中，save。 设置个人信息git config --global user.name "shenjia” git config --global user.email shenjia30615@163.com 修改hexo根目录下_config.yml文件（xxxx为你的github账户名称）deploy: type: github repo: git@github.com:xxxx/xxxx.github.io.git branch: master 提交本地博客到github上就可以了，Hexo博客搭建已经完成了，并且可以git提交到github上，具体的提交通过在博客站点目录输入上面介绍的hexo的三个命令，具体如下，成功之后，通过访问xxxx.github.io就可以访问本博客。 hexo clean && hexo g && hexo d 先写这么多，还学了一些主题优化，后面慢慢加进来。第一次写技术博客，可能条理不清楚，慢慢加油。]]></content>
      <tags>
        <tag>Next</tag>
        <tag>GitHub</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
